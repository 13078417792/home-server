<?php

namespace app\tool\model;

use think\Model;

class Account extends Base{

    protected $pk = 'uid';

    protected function initialize(){
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 创建账号
     * @param array $data
     * @return array|bool
     */
    public function createAccount(array $data){
//        $validate = validate('Account');
        $validate = new \app\tool\validate\Account;

        if($validate->scene('create')->check($data)){
            $data['pwd'] = password_hash($data['pwd'],PASSWORD_DEFAULT);
            $this->insertAccountData($data);
            return true;
        }else{
            return $validate->getError();
        }
    }

    public function insertAccountData(array $data,$pk=false){
        $model = new self($data);
        $rows = $model->allowField(true)->save();
        return $pk?$model->id:$rows;
    }

    public function checkAccount(array $data){
        $validate = validate('Account');
        if($validate->scene('signin')->check($data)){
            $result = self::get(['username'=>$data['username']]);
//            return password_verify($data['pwd'],$result->pwd)?'用户名或密码错误':true;
//            return true;
            return password_verify($data['pwd'],$result->pwd)?true:'用户名或密码错误';
        }else{
            return $validate->getError();
        }
    }

    /** 关联模型 Start */

    public function folder(){
        return $this->hasMany('NetDiskFolder','account_id');
    }

    public function userDisk(){
        return $this->hasMany('UserNetDisk','account_id');
    }


    /** 关联模型End */

    public function getCurrentUserDiskFolder(bool $tree=true,bool $obj=false){
        $model = $this->folder()->where(['account_id'=>$this->user_id]);
        $field = 'id,account_id,name,create_time,pid,update_time,parent_key';
        if($obj){
            $folders = $model->field($field)->select();
        }else{
            $folders = $model->column($field,'id');
        }
        if($tree){
            if($obj) $folders = toArray($folders);
//            $folders = NetDiskFolder::handleTree($folders);
            $folders = NetDiskFolder::handleTreeRef($folders);
        }
        return $folders;
    }

    public function hasFolder(int $id,bool $detail=false){
        if(!$id) return false;
        $info = $this->folder()->find($id);
        if(!$info) return false;
        if(!$detail){
            $info = (bool)$info;
        }
        return $info;
    }

    public function getUserDiskFile(int $folder_id){
        $disk = $this->userDisk();
        $files = $disk
            ->where([
                'a.recycle'=>0,
                'a.folder_id'=>$folder_id
            ])
            ->alias('a')
            // ->field('a.file_id,a.recycle,a.account_id,b.id,b.time',true)
                ->field('a.id,a.time,a.folder_id,a.account_id,a.name,b.size,b.is_merge')
            ->join('net_disk_file b','a.file_id=b.id')
            ->select();
        config('url_common_param',false);
        foreach($files as &$file){
            $file['download'] = url('/tool/disk/download',[
                'file'=>lock(json_encode([
                    'file_id'=>$file['id'],
                    'name'=>$file['name'],
                    'auth'=>$GLOBALS['Auth']
                ]))
            ],'');
        }
        return $files;
    }

//    public function hasUserDiskFile($id) :bool{
//        $disk = $this->userDisk();
//        $exists = $disk->find($id);
//        return (bool)$exists;
//    }

    public function hasSameFileName(string $name,$pid) :bool{
        $disk = $this->userDisk();
        $count = $disk->where([
            'name'=>$name,
            'folder_id'=>$pid,
            'recycle'=>0
        ])->count();
        return (bool)$count;
    }

        public function hasUserFile(int $id){
        return (bool)$this->userDisk()->where([
            'id'=>$id,
            'recycle'=>0
        ])->count();
    }

    public function getUserFileDetail(int $id){
        return $this->userDisk()->find([
            'id'=>$id,
            'recycle'=>0
        ]);
    }
}
